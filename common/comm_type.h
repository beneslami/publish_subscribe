#pragma once

#include <stdint.h>

typedef enum msg_type_ { 
    SUB_TO_DISPATCH,
    DISPATCH_TO_SUB,
    PUB_TO_DISPATCH,
    DISPATCH_TO_PUB
} msgType_t;

typedef enum subMsgType_ {
    SUB_MSG_DATA,   // data msg generated by publisher to be conveyed to subscriber
    SUB_MSG_ADD,    // publisher publishing a new msg or subscriber subscribing a new msg
    SUB_MSG_DELETE, // publisher unpublishing a new msg or subscriber unsubscribing a new msg
    SUB_MSG_REGISTER,
    SUB_MSG_UNREGISTER,
    SUB_MSG_ERROR
} subMsgType_t;

typedef enum dmsgPriority_ {
    DMSG_PR_HIGH,
    DMSG_PR_MEDIUM,
    DMSG_PR_LOW,
    DMSG_PR_MAX
} dmsgPriority_t;

typedef struct dmsg_ {
    /* unique ID: allocated by the dispatcher 
    If msg is generated by publisher or subscriber, the msgId will be equal to zero. Later, the dispatcher will initialize it.
    */
    uint32_t msgId;
    /*
    Direction: from publisher to the dispatcher
                from subscriber to the dispatcher
                from coordinator to subscriber
                from coordinator to publisher
    */
    msgType_t msgType;
    /*
    Register msg or unregister msg 
    simple data msg
    subscriber msg ADD
    subscriber msg DEL
    */
    subMsgType_t subMsgType;
    dmsgPriority_t priority;
    uint32_t msgCode;
    union {
        uint32_t publisherId;
        uint32_t subscriberId;
    }id;
    uint16_t tlvBufferSize;
    char tlvBuffer[0];
} dmsg_t;

static inline const char *msgTypeToString(msgType_t msg_type) {
    switch (msg_type) {
        case SUB_TO_DISPATCH:
            return "SUBS_TO_COORD";
        case DISPATCH_TO_SUB:
            return "COORD_TO_SUBS";
        case PUB_TO_DISPATCH:
            return "PUB_TO_COORD";
        case DISPATCH_TO_PUB:
            return "COORD_TO_PUB";
    }
    return "UNKNOWN";
}

static inline const char *subMsgTypeToString(subMsgType_t sub_msg_type) {
    switch (sub_msg_type) {
        case SUB_MSG_DATA:
            return "SUB_MSG_DATA";
        case SUB_MSG_ADD:
            return "SUB_MSG_ADD";
        case SUB_MSG_DELETE:
            return "SUB_MSG_DELETE";
        case SUB_MSG_REGISTER:
            return "SUB_MSG_REGISTER";
        case SUB_MSG_UNREGISTER:
            return "SUB_MSG_UNREGISTER";
        case SUB_MSG_ERROR:
            return "SUB_MSG_ERROR";
    }
    return "UNKNOWN";
}